CSSS 508, Week 3
===
author: Rebecca Ferrell
date: April 13, 2016
transition: rotate
width: 1100
height: 750


Weaning you off of spreadsheets
===

Today we'll talk about `dplyr`: a package that does in R just about any calculation you've tried to do in Excel, but more *transparently*, *reproducibly*, and *safely*.

Don't be the sad research assistant who made this mistake ([Reinhart and Rogoff](http://www.bloomberg.com/news/articles/2013-04-18/faq-reinhart-rogoff-and-the-excel-error-that-changed-history)):

![Reinhart and Rogoff's spreadsheet error](http://rooseveltinstitute.org/wp-content/uploads/styles/large/public/content_images/reinhart_rogoff_coding_error_0.png)



Modifying data frames with dplyr
===
type: section


Filtering rows (subsetting)
===

Recall last week we used the `filter` command to subset data like so:
```{r}
library(dplyr)
library(gapminder)

Canada <- gapminder %>%
    filter(country == "Canada")
```

Excel analogue:

![Excel's filter](http://content.gcflearnfree.org/topics/143/ex07_filter.gif)


%in%
===

Common use case: want to filter rows to things in some set. The `c()` function (**c**ombine, **c**oncatenate) is how we make **vectors** in R, which is an important data type. We'll talk more about those next week.

```{r}
former_yugoslavia <- c("Bosnia and Herzegovina", "Croatia", "Macedonia", "Montenegro", "Serbia", "Slovenia")
yugoslavia <- gapminder %>%
    filter(country %in% former_yugoslavia)
tail(yugoslavia, 2)
```


What to include in my vector? Use distinct
===

You can see all the values in your data for columns using `distinct`:

```{r}
gapminder %>% distinct(continent)
```

This works for multiple columns too to get all combinations:

```{r, eval=FALSE}
gapminder %>% distinct(continent, year)
```


Time to talk about pipes (%>%)
===

The `dplyr` package makes use of an operator (not native to R) called a **pipe**. We write pipes like `%>%` (*Cntl-Shift-M*). Pipes take the object on the left and apply the function on the right to them. Read out loud: "and then..."

```{r}
gapminder %>% filter(country == "Canada") %>% head(2)
```

Pipes save us typing and allow chaining like above, so we use them all the time when manipulating data frames.


Piping comments
===
incremental: true

- Pipes are clearer to read when you have each function on a separate line (inconsistent in these slides because of space constraints).
```{r, eval=FALSE}
take_this_data %>%
    do_first_thing(with = this_value) %>%
    do_next_thing(using = that_value) %>% ...
```

- The stuff on the left of the pipe is passed to the *first argument* of the function on the right. Other arguments go on the right when we pipe the function. (If you look at `dplyr` documentation where you see functions but not pipes, you see the first argument is always the data.)

- If you ever find yourself piping a function where the data is not the first argument (as shown in its help page), use `.` in the data argument instead.
```{r, eval=FALSE}
yugoslavia %>% lm(pop ~ year, data = .)
```


Sampling rows: sample_n
===

Maybe we want to filter *at random* to work with a smaller dataset. You can randomly sample rows with or without replacement using `sample_n` or `sample_frac`.

```{r}
set.seed(0413) # makes random numbers repeatable
yugoslavia %>% sample_n(size = 6, replace = FALSE)
```


Sorting: arrange
===

Along with filtering the data to see certain rows, we might want to sort it:

```{r}
yugoslavia %>% arrange(year, desc(pop))
```


Keeping columns: select
===

Not only can we limit rows, but we can limit columns (and put them in the order listed) using `select`. 

```{r}
yugoslavia %>% select(country, year, pop) %>% head(4)
```


Dropping columns: select
===

We can instead drop columns with `select` using `-` signs:

```{r}
yugoslavia %>% select(-continent, -pop, -lifeExp) %>% head(4)
```


Helper functions for select
===

`select()` has a variety of helper functions like `starts_with`, `ends_with`, and `contains`. These are very useful if you have a "wide" data frame with column names following a pattern! See `?select`.

![Obama college scorecard example](images/scorecarddata.png)

(US Dept. of Education "College Scorecard" data: > 100 columns)


Renaming columns with select
===

We can rename columns using `select`, but that drops everything that isn't mentioned:

```{r}
yugoslavia %>%
    select(year, Life_Expectancy = lifeExp) %>%
    head(4)
```


Safer: rename columns with...rename
===

```{r}
yugoslavia %>%
    select(country, year, lifeExp) %>%
    rename(Life_Expectancy = lifeExp) %>%
    head(4)
```


Column naming practices
===
incremental: true

- *Good* column names will be self-describing. Don't use inscrutable abbreviations to save effort. RStudio's autocompleting functions take away the pain of long variable names: hit tab while typing code.

- *Valid* "naked" column names can contain upper or lowercase letters, numbers, periods, and underscores. They must start with a letter or period and not be a special reserved word (e.g. `TRUE`, `if`).

- Names are case-sensitive: `Year` and `year` are not the same thing!

- You can include spaces or use reserved words if you put backticks around the name. Spaces can be worth including when preparing data for `ggplot2` or `pander` since you don't have to rename axes or table headings.


Column name with space example
===

```{r}
library(pander)
yugoslavia %>%
    filter(country == "Serbia") %>%
    select(year, lifeExp) %>%
    rename(Year = year, `Life Expectancy` = lifeExp) %>%
    head(5) %>%
    pander(style = "rmarkdown", caption = "Serbian life expectancy")
```


Create new columns: mutate
===

Thing you often do in a spreadsheet: add a new column to your existing data and populate it down.

![Dragging down formula in Excel](http://www.aatcomment.org.uk/wp-content/uploads/2014/03/Excel-formula-2.png)

`dplyr` way: add new columns to a data frame using `mutate`.


mutate example
===

```{r}
yugoslavia %>% filter(country == "Serbia") %>%
    select(year, pop, lifeExp) %>%
    mutate(pop_million = pop / 1000000,
           life_exp_past_40 = lifeExp - 40) %>%
    head(5)
```


ifelse()
===

A common function used in `mutate` (and in general in R programming) is `ifelse()`. This returns a value depending on logical tests.

```{r}
yugoslavia %>%
    mutate(short_country = ifelse(country == "Bosnia and Herzegovina", "B and H", as.character(country))) %>%
    select(short_country, year, pop) %>%
    arrange(year, short_country) %>%
    head(3)
```


Summarizing with dplyr
===
type: section


General aggregation: summarize
===

`summarize` takes your rows of data and computes something across them: count how many rows there are, calculate the mean or total, etc. You can use any function that aggregates multiple values into a single one (like `sd`).

In a spreadsheet:

![Excel equivalent of summing a column](https://osiprodeusodcspstoa01.blob.core.windows.net/en-us/media/5feb1ba8-a0fb-49d1-8188-dcf1ba878a42.jpg)


Summarize example
===

```{r}
yugoslavia %>%
    filter(year == 1982) %>%
    summarize(n_obs = n(),
              total_pop = sum(pop),
              mean_life_exp = mean(lifeExp),
              range_life_exp = max(lifeExp) - min(lifeExp))
```


Avoiding repetition: summarize_each()
===

Maybe you need to calculate the mean and standard deviation of a bunch of columns. With `summarize_each()`, you put the functions to use in a `funs()` list, and the variables to compute over after that (like `select` syntax).

```{r}
yugoslavia %>%
    filter(year == 1982) %>%
    summarize_each(funs(mean, sd),
                   lifeExp, pop)
```


Splitting data into groups: group_by
===

The special function `group_by()` changes how functions operate on the data, most importantly `summarize`. These functions are computed *within each group* as defined by variables given, rather than over all rows at once. Typically the variables you group by will be integers, factors, or characters, and not continuous real values.

Excel analogue: pivot tables

![Pivot table](http://www.excel-easy.com/data-analysis/images/pivot-tables/two-dimensional-pivot-table.png)


group_by() example
===


```{r}
yugoslavia %>%
    group_by(year) %>%
    summarize(num_countries = n_distinct(country),
              total_pop = sum(pop),
              total_gdp_per_cap = sum(pop * gdpPercap) /
                  total_pop) %>%
    head(5)
```


Window functions
===

Grouping can also be used with `mutate` or `filter` to give rank orders within a group, lagged values, and cumulative sums. Much more on window functions is in a [vignette](https://cran.r-project.org/web/packages/dplyr/vignettes/window-functions.html).

```{r}
yugoslavia %>% select(country, year, pop) %>%
    filter(year >= 2002) %>% group_by(country) %>%
    mutate(lag_pop = lag(pop, order_by = year),
           pop_change = pop - lag_pop) %>% head(4)
```


Lab break!
===

With the Gapminder data, practice the following analyses:

* Find the population (in units of millions of people) in 2007 for countries in Asia. Make a histogram.
* Use population and GDP per capita to find the 10 largest economies in 1952 as measured by overall GDP (not per capita).
* For each country and each year, find the percentage growth of the population relative to the population of the country 5 years prior (the Gapminder data are reported every 5 years). Then find the 10 country-year pairs that had the highest percentage growth relative to 5 years prior, and the 10 country-year pairs that had the lowest percentage growth.


Joining data frames
===
type: section


When do we need to join tables?
===

* Want to make columns using criteria too complicated for `ifelse()`
* Combine data stored in separate places: e.g. student demographic information with student homework grades

Excel equivalents: `VLOOKUP`, `MATCH`

![VLOOKUP example](http://www.systemfunda.com/wp-content/uploads/2013/11/EXCEL_VLOOKUP.jpg)


Joining: conceptually
===

We need to think about the following when we want to merge data frames `A` and `B`:

* Which rows are we keeping from each data frame?
* Which columns are we keeping from each data frame?
* Which variables determine whether rows match?


Types of joins
===

* `A %>% inner_join(B)`: keep rows from `A` that match rows in `B`, columns from both `A` and `B`
* `A %>% left_join(B)`: keep all rows from `A`, matched with `B` wherever possible (`NA` when not), columns from both `A` and `B`
* `A %>% right_join(B)`: keep all rows from `B`, matched with `A` wherever possible (`NA` when not), columns from both `A` and `B`
* `A %>% full_join(B)`: keep all rows from either `A` or `B`, matched wherever possible (`NA` when not), columns from both `A` and `B`
* `A %>% semi_join(B)`: keep rows from `A` that match rows in `B`, columns from just `A`
* `A %>% anti_join(B)`: keep rows from `A` that *don't* match a row in `B`, columns from just `A`


Matching criteria
===

Usually, we determine that rows should match because they have some columns containing the same value. We list these in a `by = ` argument to the join

* No `by`: matches using all variables in `A` and `B` that have identical names
* `by = c("var1", "var2", "var3")`: matches on identical values of `var1`, `,var2`, `var3` in both `A` and `B`
* `by = c("Avar1" = "Bvar1", "Avar2" = "Bvar2")`: matches identical values of `Avar1` variable in `A` to `Bvar1` variable in `B`, and `Avar2` variable in `A` to `Bvar2` variable in `B`

(Need to get more complicated? You'll want to learn SQL.)


Join examples
===

flight data



Lab break!
===

Practice some joins on the airplane data.


Homework
===
type: section

Pick some relationship to look at in the Gapminder data (e.g. changes in life expectancy over time) and write up a .Rmd file describing `ggplot2` visualizations used to investigate that question. You can choose to work with a subset of the data (e.g. just African countries). Upload both the .Rmd file and the .html file to Canvas.

You should include somewhere between 4 and 8 graphs. All titles, axes, and legends should be labelled clearly (not raw variable names). You must have at least one graph with `facet_wrap` or `facet_grid`. You must include at least one manually specified legend. You can go beyond the `geoms` covered today if you want to make histograms, bar charts, add vertical or horizontal lines, etc.

Your document should be pleasant for a peer to look at, with some organization. You must write up your observations in words as well as showing the graphs. Use chunk options `echo` and `results` to limit the code/output you show in the .html.


Grading rubric
===

* 0: Didn't turn anything in
* 1: Turned in but low effort, ignoring many directions
* 2: Decent effort, followed directions with some minor issues
* 3: Nailed it